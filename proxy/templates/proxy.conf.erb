<%

require 'base64'

velocita_url = ENV['VELOCITA_URL'] || 'http://localhost'
if velocita_url.end_with? '/'
    velocita_url = velocita_url.sub(/\/+$/, '')
end
tls_enabled = ENV['VELOCITA_TLS_ENABLED'] == 'true'
auth_type = ENV['VELOCITA_AUTH_TYPE'] || 'none'

caches = {}
mirrors = {}

ENV.keys.map { |key| key.to_s }
    .select { |key| key.match(/^MIRROR_.+_URL$/) }
    .map { |key| key[/^MIRROR_(.+)_URL$/, 1] }
    .each do |name|
        friendly_name = name.downcase.gsub('_', '-')

        url = ENV["MIRROR_#{name}_URL"].dup
        unless url.end_with? '/'
            url << '/'
        end

        caches[friendly_name] = {
            :size => ENV["MIRROR_#{name}_CACHE_SIZE"] || '1g',
            :expiry => ENV["MIRROR_#{name}_CACHE_EXPIRY"] || '3650d',
        }

        mirrors[friendly_name] = {
            :type => ENV["MIRROR_#{name}_TYPE"] || 'simple',
            :path => friendly_name,
            :url => url,
            :cache => friendly_name,
            :revalidate => ['true', '1', 'on', 'yes'].include?(ENV["MIRROR_#{name}_ALLOW_REVALIDATE"]),
            :packages_json_expiry => ENV["MIRROR_#{name}_PACKAGES_JSON_EXPIRY"] || '2m',
            :auth_type => ENV["MIRROR_#{name}_AUTH_TYPE"] || 'basic',
            :auth_user => ENV["MIRROR_#{name}_AUTH_USERNAME"] || '',
            :auth_pass => ENV["MIRROR_#{name}_AUTH_PASSWORD"] || '',
            :user_agent => ENV["MIRROR_#{name}_USER_AGENT"] || 'Velocita Composer Cache',
        }
    end

-%>
# Allow nginx to run as a non-root user
client_body_temp_path /tmp/client_temp;
proxy_temp_path       /tmp/proxy_temp_path;
fastcgi_temp_path     /tmp/fastcgi_temp;
uwsgi_temp_path       /tmp/uwsgi_temp;
scgi_temp_path        /tmp/scgi_temp;

# Log format
log_format upstreamlog '$remote_addr - $remote_user [$time_local] upstream $proxy_host $upstream_addr [$upstream_cache_status] $request [$upstream_status] ${upstream_response_time}ms ${upstream_response_length}b';
access_log /var/log/nginx/access.log upstreamlog;

# Caching configuration
proxy_cache_background_update on;
proxy_cache_convert_head off;
proxy_cache_key "$request_method $scheme $http_accept_encoding $proxy_host $request_uri";
proxy_cache_lock on;
proxy_cache_use_stale error timeout updating http_403 http_404 http_429 http_500 http_502 http_503 http_504;
proxy_cache_valid 200 302 1d;
proxy_cache_valid 404 30s;

# Proxy configuration
proxy_connect_timeout 10s;
proxy_http_version 1.1;
proxy_max_temp_file_size 2m;
proxy_read_timeout 10s;
proxy_send_timeout 10s;
proxy_socket_keepalive on;
proxy_ssl_protocols TLSv1.3 TLSv1.2;
proxy_ssl_server_name on;

# Remove and ignore headers from proxy server responses
proxy_hide_header Cache-Control;
proxy_hide_header Expires;
proxy_hide_header Set-Cookie;
proxy_hide_header Strict-Transport-Security;
proxy_ignore_headers Cache-Control Expires Set-Cookie;

# Caching paths
<%- caches.each do |name, cache| -%>
proxy_cache_path /var/cache/velocita/<%= name %> levels=2:2 keys_zone=<%= name %>:5m inactive=<%= cache[:expiry] %> max_size=<%= cache[:size] %>;
<%- end -%>

# Proxy redirects
<%- mirrors.each do |name, mirror| -%>
proxy_redirect <%= mirror[:url] %> <%= velocita_url %>/mirror/<%= mirror[:path] %>/;
<%- end -%>
<%- if tls_enabled -%>

# TLS configuration
ssl_ciphers HIGH;
ssl_protocols TLSv1.3 TLSv1.2;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
<%- end -%>
<%- case auth_type -%>
<%- when 'basic' -%>

# Basic authentication
auth_basic 'Velocita Proxy';
auth_basic_user_file /etc/nginx/users.htpasswd;
<%- end -%>

# Enable compression
gzip on;
gzip_comp_level 9;
gzip_min_length 1400;
gzip_types application/json;
<%- if tls_enabled -%>

server {
    listen 8080 default_server;
    listen [::]:8080 default_server;
    server_name _;

    return 301 <%= velocita_url %>$request_uri;
}
<%- end -%>

server {
<%- if tls_enabled -%>
    listen 8443 ssl http2 default_server;
    listen [::]:8443 ssl http2 default_server;

    ssl_certificate /etc/nginx/server.crt;
    ssl_certificate_key /etc/nginx/server.key;
<%- else -%>
    listen 8080 default_server;
    listen [::]:8080 default_server;
<%- end -%>

    server_name _;
    root /var/www/html;
  <%- mirrors.each do |name, mirror| -%>

    location /mirror/<%= mirror[:path] %>/ {
        proxy_pass <%= mirror[:url] %>;
        proxy_cache <%= mirror[:cache] %>;
        proxy_cache_revalidate <%= mirror[:revalidate] ? 'on' : 'off' %>;

        proxy_set_header Connection '';
        proxy_set_header Host $proxy_host;
        proxy_set_header User-Agent '<%= mirror[:user_agent] %>';
    <%- case mirror[:auth_type] -%>
    <%- when 'basic' -%>
      <%- unless mirror[:auth_user].empty? || mirror[:auth_pass].empty? -%>
        proxy_set_header Authorization "Basic <%= Base64.strict_encode64("#{mirror[:auth_user]}:#{mirror[:auth_pass]}") %>";
      <%- end -%>
    <%- when 'bearer' -%>
      <%- unless mirror[:auth_pass].empty? -%>
        proxy_set_header Authorization "Bearer <%= mirror[:auth_pass] %>";
      <%- end -%>
    <%- end -%>
    <%- if mirror[:type] == 'composer' -%>

        location = /mirror/<%= mirror[:path] %>/packages.json {
            proxy_pass <%= mirror[:url] %>packages.json;
            proxy_cache_valid 200 <%= mirror[:packages_json_expiry] %>;
        }
    <%- end -%>
    }
  <%- end -%>
}
